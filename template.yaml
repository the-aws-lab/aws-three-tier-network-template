AWSTemplateFormatVersion: "2010-09-09"
Description: "Virtual Private Cloud"

Parameters:
  ENV:
    Description: "Environment"
    Type: String
    Default: stage

  AppName:
    Description: "Application Name"
    Type: String
    Default: theawslab

Mappings:
  CidrConfig:
    VPC : 
      CIDR : 10.20.0.0/16
    Pub1 : 
      CIDR : 10.20.1.0/24
    Pub2 : 
      CIDR : 10.20.2.0/24
    Pvt1 : 
      CIDR : 10.20.3.0/24
    Pvt2 : 
      CIDR : 10.20.4.0/24
    DB1 : 
      CIDR : 10.20.5.0/24
    DB2 : 
      CIDR : 10.20.6.0/24
    

Resources:

    # Setup Virtual Private Cloud
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !FindInMap [CidrConfig, VPC, CIDR]
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV, !Ref AppName, "vpc"]]          
          - Key: Env
            Value: !Ref ENV

    # Setup Public Subnets
    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select [0, !GetAZs ""]
        CidrBlock: !FindInMap [CidrConfig, Pub1, CIDR]
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV, !Ref AppName, "public-subnet-a"]]
          - Key: Env
            Value: !Ref ENV

    PublicSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select [1, !GetAZs ""]
        CidrBlock: !FindInMap [CidrConfig, Pub2, CIDR]
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV, !Ref AppName, "public-subnet-b"]]
          - Key: Env
            Value: !Ref ENV  

    # Setup Private Subnets
    PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        MapPublicIpOnLaunch: false
        AvailabilityZone: !Select [0, !GetAZs ""]
        CidrBlock: !FindInMap [CidrConfig, Pvt1, CIDR]
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV, !Ref AppName, "private-subnet-a"]]
          - Key: Env
            Value: !Ref ENV

    PrivateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        MapPublicIpOnLaunch: false
        AvailabilityZone: !Select [1, !GetAZs ""]
        CidrBlock: !FindInMap [CidrConfig, Pvt2, CIDR]
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV, !Ref AppName, "private-subnet-b"]]
          - Key: Env
            Value: !Ref ENV

    # Setup Database Subnets
    DatabaseSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        MapPublicIpOnLaunch: false
        AvailabilityZone: !Select [0, !GetAZs ""]
        CidrBlock: !FindInMap [CidrConfig, DB1, CIDR]
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV,!Ref AppName, "db-subnet-a"]]
          - Key: Env
            Value: !Ref ENV


    DatabaseSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        MapPublicIpOnLaunch: false
        AvailabilityZone: !Select [1, !GetAZs ""]
        CidrBlock: !FindInMap [CidrConfig, DB2, CIDR]
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV, !Ref AppName, "db-subnet-b"]]
          - Key: Env
            Value: !Ref ENV

    # Setup Internet Gateway
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV,"igw"]]
          - Key: Env
            Value: !Ref ENV

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    # Setup Elastic IP to attached with NAT Gateway
    ElasticIP:
      Type: AWS::EC2::EIP
      Properties:
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref ENV,"eip"]]
          - Key: Env
            Value: !Ref ENV
    
    # Setup NAT Gateway
    NATGateway:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt ElasticIP.AllocationId
        SubnetId: !Ref PublicSubnetA
        Tags: 
          - Key: Name
            Value: !Join ["-", [!Ref ENV,"nat-gateway"]]
          - Key: Env
            Value: !Ref ENV

    # Setup Public Route Table

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref VPC
        Tags: 
          - Key: Name
            Value: !Join ["-", [!Ref ENV,"public-route"]]
          - Key: Env
            Value: !Ref ENV
      
    PublicRoute:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
        RouteTableId: !Ref PublicRouteTable

    # Associate Public Route Table

    PublicSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetA
        RouteTableId: !Ref PublicRouteTable

    PublicSubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetB
        RouteTableId: !Ref PublicRouteTable

    # Setup Private Route Table
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref VPC
        Tags: 
          - Key: Name
            Value: !Join ["-", [!Ref ENV,"private-route"]]
          - Key: Env
            Value: !Ref ENV   
    
    PrivateRoute:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NATGateway
        RouteTableId: !Ref PrivateRouteTable


    # Associate Private Route Table
    PrivateSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetA
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetB
        RouteTableId: !Ref PrivateRouteTable

    # Setup Database Route Table
    DatabaseRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref VPC
        Tags: 
          - Key: Name
            Value: !Join ["-", [!Ref ENV,"database-route"]]
          - Key: Env
            Value: !Ref ENV   
    
    DatabaseRoute:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NATGateway
        RouteTableId: !Ref DatabaseRouteTable


    # Associate Database Route Table
    DatabaseSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref DatabaseSubnetA
        RouteTableId: !Ref DatabaseRouteTable

    DatabaseSubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref DatabaseSubnetB
        RouteTableId: !Ref DatabaseRouteTable

    # Setup Public NACL
    PublicNacl:
      Type: AWS::EC2::NetworkAcl
      Properties: 
        VpcId: !Ref VPC
        Tags: 
            - Key: Name
              Value: !Join ["-", [!Ref ENV,"public-nacl"]]
            - Key: Env
              Value: !Ref ENV 

    # Inbound Public NACL Entry
    InboundHTTPPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 100 
        CidrBlock: 0.0.0.0/0
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 80
          To: 80
        Protocol: 6

    InboundHTTPSPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 200 
        CidrBlock: 0.0.0.0/0
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 443
          To: 443
        Protocol: 6

    InboundSSHPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 300 
        CidrBlock: 0.0.0.0/0
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 22
          To: 22
        Protocol: 6

    InboundEphemeralPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 400 
        CidrBlock: 0.0.0.0/0
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 1024
          To: 65535
        Protocol: 6

    # Outbound Public NACL Entry
    OutboundHTTPPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 100 
        CidrBlock: 0.0.0.0/0
        Egress: True
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 80
          To: 80
        Protocol: 6

    OutboundHTTPSPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 200 
        CidrBlock: 0.0.0.0/0
        Egress: True
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 443
          To: 443
        Protocol: 6

    OutboundSSHPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 300 
        CidrBlock: 0.0.0.0/0
        Egress: True
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 22
          To: 22
        Protocol: 6

    OutboundEphemeralPublicNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNacl
        RuleAction: Allow
        RuleNumber: 400 
        CidrBlock: 0.0.0.0/0
        Egress: True
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 1024
          To: 65535
        Protocol: 6

    # NACL and Public Subnet Association
    PublicSubnetANaclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties: 
        NetworkAclId: !Ref PublicNacl
        SubnetId: !Ref PublicSubnetA

    PublicSubnetBNaclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties: 
        NetworkAclId: !Ref PublicNacl
        SubnetId: !Ref PublicSubnetB

    # Setup Private NACL
    PrivateNacl:
      Type: AWS::EC2::NetworkAcl
      Properties: 
        VpcId: !Ref VPC
        Tags: 
            - Key: Name
              Value: !Join ["-", [!Ref ENV,"private-nacl"]] 
            - Key: Env
              Value: !Ref ENV

    # Inbound Private NACL Entry
    InboundHTTPPrivateNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PrivateNacl
        RuleAction: Allow
        RuleNumber: 100 
        CidrBlock: 0.0.0.0/0
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 0
          To: 65535
        Protocol: 6


    # Outbound Private NACL Entry
    OutboundHTTPPrivateNaclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PrivateNacl
        RuleAction: Allow
        RuleNumber: 100 
        CidrBlock: 0.0.0.0/0
        Egress: True
        Icmp: 
          Code: -1
          Type: -1
        PortRange: 
          From: 0
          To: 65535
        Protocol: 6

    # NACL and Private Subnet Association
    PrivateSubnetANaclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties: 
        NetworkAclId: !Ref PrivateNacl
        SubnetId: !Ref PrivateSubnetA

    PrivateSubnetBNaclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties: 
        NetworkAclId: !Ref PrivateNacl
        SubnetId: !Ref PrivateSubnetB

    DatabaseSubnetANaclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties: 
        NetworkAclId: !Ref PrivateNacl
        SubnetId: !Ref DatabaseSubnetA

    DatabaseSubnetBNaclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties: 
        NetworkAclId: !Ref PrivateNacl
        SubnetId: !Ref DatabaseSubnetB

Outputs:

    VPC:
      Description: VPC Id
      Value: !Ref VPC
      Export:
        Name: "OutputVPC"

    DBSubnetAOutput:
      Description: DB Output A
      Value: !Ref DatabaseSubnetA
      Export:
        Name: "OutputDBSubnetA"

    DBSubnetBOutput:
      Description: DB Output B
      Value: !Ref DatabaseSubnetB
      Export:
        Name: "OutputDBSubnetB"
    
    CIDR:
      Description: VPC CIDR Block
      Value: !FindInMap [CidrConfig, VPC, CIDR]
      Export:
        Name: "OutputCIDR"

    PublicSubnetAOutput:
      Description: Public Subnet Output A
      Value: !Ref PublicSubnetA
      Export:
        Name: "OutputPublicSubnetA"

    PublicSubnetBOutput:
      Description: Public Subnet Output B
      Value: !Ref PublicSubnetB
      Export:
        Name: "OutputPublicSubnetB"

    PrivateSubnetAOutput:
      Description: Private Subnet Output A
      Value: !Ref PrivateSubnetA
      Export:
        Name: "OutputPrivateSubnetA"

    PrivateSubnetBOutput:
      Description: Private Subnet Output B
      Value: !Ref PrivateSubnetB
      Export:
        Name: "OutputPrivateSubnetB"